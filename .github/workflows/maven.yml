name: Maven CI/CD Pipeline
on:
  push:
    branches:
      - release/*
      - feature/*
    tags:
      - '1.0.*'
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

  setup:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
    - name: Change to myapp directory
      run: cd myapp
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
 

  fetch-branches:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Fetch all branches
      run: git fetch --all

  move-script:
    runs-on: ubuntu-latest
    needs: fetch-branches
    steps:
    - name: Move script to myapp directory
      run: mv ./scripts.sh ./myapp/scripts/build_functions.sh

  source-functions:
    runs-on: ubuntu-latest
    needs: move-script
    steps:
    - name: Source build functions
      run: source ./scripts/build_functions.sh
      working-directory: myapp

  determine-version:
    runs-on: ubuntu-latest
    needs: source-functions
    steps:
    - name: Determine version
      id: determine-version
      run: source ./scripts/build_functions.sh && determine_version
      working-directory: myapp

  check-changes:
    runs-on: ubuntu-latest
    needs: determine-version
    steps:
    - name: Check for changes in Project Directory
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          src:
            - 'myapp/**'
        base: ${{ github.event.before }}
        head: ${{ github.sha }}

  update-pom:
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.src == 'true' }}
    steps:
    - name: Update POM version
      run: source ./scripts/build_functions.sh && update_pom_version
      working-directory: myapp

  build-application:
    runs-on: ubuntu-latest
    needs: update-pom
    steps:
    - name: Clean, Compile, and Run Java Application
      run: source ./scripts/build_functions.sh && clean_compile_run
      working-directory: myapp

  package-application:
    runs-on: ubuntu-latest
    needs: build-application
    if: success()
    steps:
    - name: Build and Run Packaged Java Application
      run: source ./scripts/build_functions.sh && build_package
      working-directory: myapp

  upload-artifact:
    runs-on: ubuntu-latest
    needs: package-application
    if: ${{ needs.check-changes.outputs.src == 'true' }}
    steps:
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_ID }}-${{ env.VERSION }}.jar
        path: myapp/target/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}.jar

  docker-login:
    runs-on: ubuntu-latest
    needs: upload-artifact
    if: ${{ needs.check-changes.outputs.src == 'true' }}
    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

  build-push-docker:
    runs-on: ubuntu-latest
    needs: docker-login
    if: ${{ needs.check-changes.outputs.src == 'true' }}
    steps:
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.VERSION }}
        build-args: |
          BUILD_VERSION=${{ env.VERSION }}

  verify-docker:
    runs-on: ubuntu-latest
    needs: build-push-docker
    steps:
    - name: Verify Docker image
      run: docker run --rm ${{ secrets.DOCKER_USERNAME }}/myapp:latest

  no-changes:
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.src == 'true' }}
    steps:
    - name: No changes detected
      run: echo "No changes were made in myapp/src/main/*, hence no artifact was uploaded or Docker image was built."