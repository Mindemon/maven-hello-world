# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven
on:
  push:
    branches:
      - feature/automated-pipeline
    tags :
      - '*' # Trigger the workflow on all tags'
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Check for changes in myapp/src/main/java/com/myapp
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          src:
            - 'myapp/src/main/**'

    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Determine version
      id: determine-version
      run: |
          ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAGV=${GITHUB_REF#refs/tags/}
          else
            TAGV="1.0.0"
          fi
          echo "TAGV=$TAGV" >> $GITHUB_ENV
      
    - name: Update POM version
      run: |
          mvn versions:set -DnewVersion=${{ env.TAGV }}
          mvn versions:commit
      
    # - name: Extract the project current patch version, artifactId, and increment the patch version
    #   if: steps.changes.outputs.src == 'true'
    #   id: increment-version
    #   run: |
    #       ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
    #       VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
    #       echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
    #       echo "VERSION=$VERSION" >> $GITHUB_ENV
    #       echo "Extracted ARTIFACT_ID: $ARTIFACT_ID"
    #       echo "Extracted VERSION: $VERSION"
    #       IFS='.' read -r -a version_parts <<< "$VERSION"
  

    - name: Clean, Compile, and Run Java Application
      run: mvn -q clean compile exec:java
      working-directory: myapp

    - name: Build and Run Packaged Java Application
      run: mvn -B package --file pom.xml > /dev/null
      working-directory: myapp
      if: success() # Only run if the previous step is successful
    
    - name: Upload artifact
      if: steps.changes.outputs.src == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_ID }}-${{ env.TAGV }}
        path: myapp/target/${{ env.ARTIFACT_ID }}-${{ env.TAGV }}.jar

    - name: Log in to Docker Hub
      if: steps.changes.outputs.src == 'true'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      if: steps.changes.outputs.src == 'true'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.TAGV }}
        build-args: |
          BUILD_VERSION=${{ env.TAGV }}
  

  
    - name: Verify Docker image
      run: docker run --rm ${{ secrets.DOCKER_USERNAME }}/myapp:latest
      
    - name: No changes detected
      if: steps.changes.outputs.src != 'true'
      run: echo "No changes were made in myapp/src/main/*, hence no artifact was uploaded or Docker image was built."
