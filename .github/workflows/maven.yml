# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven
on:
  push:
    branches:
      - feature/automated-pipeline
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Set Project Version and Extract Version from pom.xml 
      run: |
          mvn -q versions:set -DnewVersion=1.0.1
          echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      working-directory: myapp

    - name: Clean, Compile, and Run Java Application
      run: mvn -q clean compile exec:java
      working-directory: myapp

    - name: Build and Run Packaged Java Application
      run: |
        mvn -B package --file pom.xml > /dev/null
      working-directory: myapp
      if: success() # Only run if the previous step is successful
    
    - name: Publish package #publish the artifact to GitHub Package Registry
      run: mvn --batch-mode  deploy
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
      working-directory: myapp

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ../../
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.VERSION }}
        build-args: |
          BUILD_VERSION=${{ env.VERSION }}
  

  
    - name: Verify Docker image
      run: docker run --rm ${{ secrets.DOCKER_USERNAME }}/myapp:latest


