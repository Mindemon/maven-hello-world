# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven
on:
  push:
    branches:
      - feature/automated-pipeline
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Extract the project current patch version, artifactId, and increment the patch version
      id: increment-version
      run: |
          ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted ARTIFACT_ID: $ARTIFACT_ID"
          echo "Extracted VERSION: $VERSION"
          IFS='.' read -r -a version_parts <<< "$VERSION"
          PATCH_VERSION=${version_parts[2]}
          NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
          NEW_VERSION="${version_parts[0]}.${version_parts[1]}.$NEW_PATCH_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"
          mvn -q versions:set -DnewVersion=$NEW_VERSION
      working-directory: myapp
  

    - name: Clean, Compile, and Run Java Application
      run: mvn -q clean compile exec:java
      working-directory: myapp

    - name: Build and Run Packaged Java Application
      run: mvn -B package --file pom.xml > /dev/null
      working-directory: myapp
      if: success() # Only run if the previous step is successful
    
    - name: upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_ID }}-${{ env.NEW_VERSION }}
        path: target/myapp-${{ env.NEW_VERSION }}.jar
        working-directory: myapp

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.NEW_VERSION }}
        build-args: |
          BUILD_VERSION=${{ env.NEW_VERSION }}
  

  
    - name: Verify Docker image
      run: docker run --rm ${{ secrets.DOCKER_USERNAME }}/myapp:latest
      


